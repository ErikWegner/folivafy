openapi: 3.1.0
info:
  title: Folivafy
  description: Backend for documents, validated forms and workflows
  license:
    name: AGPL-3.0 license
    url: https://github.com/ErikWegner/folivafy/blob/main/LICENSE
  version: 4.0.0
paths:
  /api/collections:
    get:
      tags:
      - admininistration
      summary: List available collections
      description: List all available collections on this server
      operationId: getCollections
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 50
          maximum: 250
          minimum: 1
        example: 50
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
        example: 0
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionsList'
        '401':
          description: User is not a collections admin
        '500':
          description: Internal server error
    post:
      tags:
      - admininistration
      summary: Create a collection
      description: Create a new collection on this server
      operationId: createCollection
      requestBody:
        description: Create a new collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
        required: true
      responses:
        '201':
          description: Collection created successfully
        '400':
          description: Invalid request payload
        '401':
          description: User is not a collections admin
        '500':
          description: Internal server error
  /api/collections/{collection_name}:
    get:
      tags:
      - collection
      summary: List collection items (documents).
      description: Get a list of items within the collection, i. e. list all documents.
      operationId: listCollectionItems
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 50
          maximum: 250
          minimum: 1
        example: 50
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
        example: 0
      - name: exactTitle
        in: query
        description: Search for documents with this exact title (upper and lower case are respected)
        required: false
        schema:
          type: string
      - name: extraFields
        in: query
        description: A comma separated list of document fields that should be contained in the response
        required: false
        schema:
          type: string
          pattern: ^[a-zA-Z0-9_]+(,[a-zA-Z0-9_]+)*$
        example: price,length
      - name: sort
        in: query
        description: |-
          A comma separated list of document fields that should be used to sort the collection.

          The sort order is determined by the last character in the field name:
           - `+` for ascending order, the field is a direct child of the document's field `f`
           - `-` for descending order, the field is a direct child of the document's field `f`
           - `f` for ascending order, the field is in dotted notation, e. g. `my_workflow.signature.date`
           - `b` for descending order, the field is in dotted notation, e. g. `my_workflow.signature.date`

          Example: `price+,length-,my_workflow.signature.dateb` will order documents by price (ascending), length (descending) and signature date (descending).
        required: false
        schema:
          type: string
          default: created+
          pattern: ^[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)*[\+\-fb](,[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)*[\+\-fb])*$
        example: email+,created-
      - name: pfilter
        in: query
        description: |-
          A pound sign (`&`) separated list of filter conditions.

          Each filter condition consists of a field name and a value. Supported operators are: equality, value in array, starts with, contains.

          Examples:
           - `f1='v12'` matches documents where field `f1` equals `"v12"`
           - `a='k'&f1=4` matches documents where field `a` equals `"k"` and field `f1` equals `4`
           - `a='k'&f3=['p1','p4','p9']` matches documents where field `a` equals `"k"` and field `f3` is one of the values `"p1"`, `"p4"`, or `"p9"`
           - `az=@'kl'` matches documents where field `az` starts with `"kl"`
           - `pt=~'imi'` matches documents where field `pt` contains the substring `"imi"`
        required: false
        schema:
          type: string
      - name: collection_name
        in: path
        description: Name of the collection
        required: true
        schema:
          type: string
          pattern: ^[a-z][-a-z0-9]*$
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionItemsList'
        '400':
          description: Invalid request
        '401':
          description: User is not a collection reader
        '404':
          description: Collection not found
        '500':
          description: Internal server error
    put:
      tags:
      - collection
      summary: Replace item
      description: Replace the item data
      operationId: updateItemById
      parameters:
      - name: collection_name
        in: path
        description: Name of the collection
        required: true
        schema:
          type: string
          pattern: ^[a-z][-a-z0-9]*$
      requestBody:
        description: Create a new document
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionItem'
        required: true
      responses:
        '201':
          description: Document updated
        '400':
          description: Invalid request
        '401':
          description: User is not a collection editor
        '404':
          description: Collection not found
        '500':
          description: Internal server error
    post:
      tags:
      - collection
      summary: Create new item
      description: Create a new item in this collection
      operationId: storeIntoCollection
      parameters:
      - name: collection_name
        in: path
        description: Name of the collection
        required: true
        schema:
          type: string
          pattern: ^[a-z][-a-z0-9]*$
      requestBody:
        description: Create a new document
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionItem'
        required: true
      responses:
        '201':
          description: Document created successfully
        '400':
          description: Invalid request
        '401':
          description: User is not a collection editor
        '404':
          description: Collection not found
        '500':
          description: Internal server error
  /api/collections/{collection_name}/{document_id}:
    get:
      tags:
      - collection
      summary: Get item
      description: Get item data, i. e. read the document from the collection.
      operationId: getItemById
      parameters:
      - name: collection_name
        in: path
        description: Name of the collection
        required: true
        schema:
          type: string
          pattern: ^[a-z][-a-z0-9]*$
      - name: document_id
        in: path
        description: UUID of the document
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Document data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionItemDetails'
        '400':
          description: Invalid request
        '401':
          description: User is not a collection reader
        '404':
          description: Collection not found
        '500':
          description: Internal server error
  /api/events:
    post:
      tags:
      - event
      summary: Create a new event.
      description: |-
        Create an event for the given document in a given collection. The collection must not be locked.

        ### Required permissions

        To create an event, the user must have one of the following permission:

        * `C_COLLECTIONNAME_READER`
        * `C_COLLECTIONNAME_ALLREADER`
      operationId: createEvent
      parameters:
      - name: collection_name
        in: path
        description: Name of the collection
        required: true
        schema:
          type: string
          pattern: ^[a-z][-a-z0-9]*$
      requestBody:
        description: Create a new event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventBody'
        required: true
      responses:
        '201':
          description: Event created successfully
        '400':
          description: Invalid request
        '401':
          description: User is not a collection reader
        '404':
          description: Collection not found
        '500':
          description: Internal server error
  /api/maintenance/{collection}/rebuild-grants:
    post:
      tags:
      - maintenance
      summary: Rebuild grants for a collection
      description: Iterate over all documents and refresh grants.
      operationId: rebuildGrants
      parameters:
      - name: collection_name
        in: path
        description: Name of the collection
        required: true
        schema:
          type: string
          pattern: ^[a-z][-a-z0-9]*$
      responses:
        '201':
          description: Grants rebuilt successfully
        '401':
          description: User is not a collection admin
        '404':
          description: Collection not found
        '500':
          description: Internal server error
  /collections/{collection_name}/search:
    post:
      tags:
      - collection
      summary: Search items
      description: Search a list of items within the collection
      operationId: searchCollection
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 50
          maximum: 250
          minimum: 1
        example: 50
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
        example: 0
      - name: extraFields
        in: query
        description: A comma separated list of document fields that should be contained in the response
        required: false
        schema:
          type: string
          pattern: ^[a-zA-Z0-9_]+(,[a-zA-Z0-9_]+)*$
        example: price,length
      - name: sort
        in: query
        description: A comma separated list of document fields that should be contained in the response
        required: false
        schema:
          type: string
          pattern: ^[a-zA-Z0-9_]+(,[a-zA-Z0-9_]+)*$
        example: price,length
      - name: collection_name
        in: path
        description: Name of the collection
        required: true
        schema:
          type: string
          pattern: ^[a-z][-a-z0-9]*$
      requestBody:
        description: Create a new document
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchDocumentsBody'
        required: true
      responses: {}
components:
  schemas:
    Collection:
      type: object
      required:
      - name
      - title
      - oao
      - locked
      properties:
        locked:
          type: boolean
          description: Indicates if new documents within the collection can be created (value `false`) or the collection is set to read only (`true`).
          examples:
          - false
          - true
        name:
          type: string
          description: Path name of the collection
          examples:
          - shapes
          - applications
          - reservations
          maxLength: 32
          minLength: 1
        oao:
          type: boolean
          description: Owner access only. Indicates if documents within the collection are _owner access only_ (value `true`) or all documents in the collection can be read by all users (`false`).
        title:
          type: string
          description: Human readable name of the collection
          examples:
          - Shapes
          - Job applications
          - Car reservations
          maxLength: 150
          minLength: 1
    CollectionItem:
      type: object
      description: Item (document) within a collection
      required:
      - id
      - f
      properties:
        f:
          description: Field data
        id:
          type: string
          format: uuid
          description: Document identifier
          examples:
          - 9f818bff-a1b4-487a-9706-29a5ac1cf898
      examples:
      - f:
          price: 14
          title: Rectangle
        id: 9f818bff-a1b4-487a-9706-29a5ac1cf898
    CollectionItemDetails:
      type: object
      description: Item (document) within a collection with additional events
      required:
      - id
      - f
      - e
      properties:
        e:
          type: array
          items:
            $ref: '#/components/schemas/CollectionItemEvent'
        f:
          description: Field data
        id:
          type: string
          format: uuid
          description: Document identifier
      examples:
      - e:
        - category: 102
          e:
            remark: Created by user c99b42eb-c557-42ed-adb2-b026fe88d6d5
            seq: 50
            title: CREATED
          id: 145
          ts: 2024-12-31T09:23:28.751293Z
        - category: 1
          e:
            new: true
            user:
              id: c99b42eb-c557-42ed-adb2-b026fe88d6d5
              name: example-user
          id: 144
          ts: 2024-12-31T09:23:28.751293Z
        f:
          price: 14
          title: Rectangle
        id: 9f818bff-a1b4-487a-9706-29a5ac1cf898
    CollectionItemEvent:
      type: object
      required:
      - id
      - ts
      - category
      - e
      properties:
        category:
          type: integer
          format: int32
          description: Arbitrary event category
        e:
          description: Event data
        id:
          type: integer
          format: int32
          minimum: 0
        ts:
          type: string
          format: date-time
    CollectionItemsList:
      type: object
      required:
      - limit
      - offset
      - total
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CollectionItem'
        limit:
          type: integer
          format: int32
          examples:
          - 100
          maximum: 250
          minimum: 1
        offset:
          type: integer
          format: int32
          examples:
          - 100
          minimum: 0
        total:
          type: integer
          format: int32
          minimum: 0
    CollectionsList:
      type: object
      required:
      - limit
      - offset
      - total
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
        limit:
          type: integer
          format: int32
          examples:
          - 100
          maximum: 250
          minimum: 1
        offset:
          type: integer
          format: int32
          examples:
          - 100
          minimum: 0
        total:
          type: integer
          format: int32
          minimum: 0
    CreateCollectionRequest:
      type: object
      description: Information about the new collection
      required:
      - name
      - title
      - oao
      properties:
        name:
          type: string
          description: Path name of the collection
          examples:
          - shapes
          maxLength: 32
          minLength: 1
          pattern: ^[a-z][-a-z0-9]*$
        oao:
          type: boolean
          description: Owner access only?
        title:
          type: string
          description: Human readable name of the collection
          examples:
          - Two-dimensional shapes
          maxLength: 150
          minLength: 1
      examples:
      - name: room-reservations
        oao: false
        title: Room reservations
    CreateEventBody:
      type: object
      description: Information about the new event
      required:
      - category
      - collection
      - document
      - e
      properties:
        category:
          type: integer
          format: int32
          description: Arbitrary event category
        collection:
          type: string
          description: Path name of the collection
        document:
          type: string
          format: uuid
          description: Document identifier
        e:
          description: Event data fields
      examples:
      - category: 1020
        collection: shapes
        document: 0a804901-a425-4f85-bb37-56827bf5f083
        e:
          mail: false
          title: Approved
    Operation:
      type: string
      enum:
      - 'null'
      - notnull
    OperationWithValue:
      type: string
      enum:
      - eq
      - ne
      - lt
      - le
      - gt
      - ge
      - startswith
      - containstext
      - in
    SearchDocumentsBody:
      type: object
      description: Search filters
      properties:
        filter:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/SearchFilter'
    SearchFilter:
      oneOf:
      - $ref: '#/components/schemas/SearchFilterFieldOpValue'
      - $ref: '#/components/schemas/SearchFilterFieldOp'
      - $ref: '#/components/schemas/SearchGroup'
      description: A search filter
    SearchFilterFieldOp:
      type: object
      required:
      - f
      - o
      properties:
        f:
          type: string
          description: Field name
        o:
          $ref: '#/components/schemas/Operation'
          description: Operator
    SearchFilterFieldOpValue:
      type: object
      required:
      - f
      - o
      - v
      properties:
        f:
          type: string
          description: The name of the field to filter. Can contain dots to access nested fields.
          examples:
          - name
          - price.currency
        o:
          $ref: '#/components/schemas/OperationWithValue'
          description: Operator
        v:
          description: The value to compare with the field. Can be string, boolean or number
    SearchGroup:
      oneOf:
      - type: object
        description: Join filters using AND operation
        required:
        - and
        properties:
          and:
            type: array
            items:
              $ref: '#/components/schemas/SearchFilter'
            description: Join filters using AND operation
      - type: object
        description: Join filters using OR operation
        required:
        - or
        properties:
          or:
            type: array
            items:
              $ref: '#/components/schemas/SearchFilter'
            description: Join filters using OR operation
tags:
- name: admininistration
  description: Administrative tasks
- name: collection
  description: Handling documents within the collection
- name: event
  description: Events for documents
- name: maintenance
  description: Maintenance tasks
