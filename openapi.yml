openapi: 3.0.3
info:
  title: Folivafy
  description: |-
    Collection handling for validated forms
  license:
    name: AGPL-3.0 license
    url: https://github.com/ErikWegner/folivafy/blob/main/LICENSE
  version: 4.0.0
servers:
  - url: /api
paths:
  /collections:
    get:
      tags:
        - administration
      summary: List available collections
      description: List all available collections on this server
      operationId: getCollections
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionsList"
        "401":
          description: User is not a collections admin
        "500":
          description: Internal server error
    post:
      tags:
        - administration
      summary: Create a collection
      description: Create a new collection on this server
      operationId: createCollection
      requestBody:
        content:
          application/json:
            schema:
              example:
                name: shapes
                title: Shapes
                oao: false
              properties:
                name:
                  description: Path name of the collection
                  example: shapes
                  maxLength: 32
                  minLength: 1
                  pattern: "^[a-z][-a-z0-9]*$"
                  type: string
                title:
                  description: Human readable name of the collection
                  example: Shapes
                  maxLength: 150
                  minLength: 1
                  type: string
                oao:
                  description: Owner access only?
                  type: boolean
              required:
                - oao
                - name
                - title
              type: object
        description: Information about the new collection
        required: true
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
                example: 201 Created
          description: successful operation
        "400":
          description: Creating the collection failed
        "401":
          description: User is not a collections admin
        "500":
          description: Internal server error
  /collections/{collection}:
    get:
      description: Get a list of items within the collection
      operationId: listCollection
      parameters:
        - $ref: "#/components/parameters/CollectionNameParam"
        - $ref: "#/components/parameters/ExactTitle"
        - $ref: "#/components/parameters/ExtraFields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/PFilter"
        - $ref: "#/components/parameters/SortList"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionItemsList"
          description: successful operation
        "400":
          description: Invalid request
        "401":
          description: User is not a collection reader
        "404":
          description: Collection not found
        "500":
          description: Internal server error
      summary: List collection items
      tags:
        - collection
    post:
      tags:
        - collection
      summary: Create new item
      description: Create a new item in this collection
      operationId: storeIntoCollection
      parameters:
        - $ref: "#/components/parameters/CollectionNameParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionItem"
        description: Item payload
        required: true
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
                example: 201 Created
          description: successful operation
        "400":
          description: Invalid request
        "401":
          description: User is not a collection editor
        "404":
          description: Collection not found
        "500":
          description: Internal server error
    put:
      tags:
        - collection
      summary: Replace item
      description: Replace the item data
      operationId: updateItemById
      parameters:
        - $ref: "#/components/parameters/CollectionNameParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionItem"
        description: Item payload
        required: true
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
                example: 201 Created
          description: successful operation
        "400":
          description: Invalid request
        "401":
          description: User is not a collection editor
        "404":
          description: Collection not found
        "500":
          description: Internal server error
  /collections/{collection}/search:
    post:
      description: Search a list of items within the collection
      operationId: searchCollection
      parameters:
        - $ref: "#/components/parameters/CollectionNameParam"
        - $ref: "#/components/parameters/ExtraFields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/SortList"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCollectionBody"
        description: Search filters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionItemsList"
          description: successful operation
        "400":
          description: Invalid request
        "401":
          description: User is not a collection reader
        "404":
          description: Collection not found
        "500":
          description: Internal server error
      summary: List collection items
      tags:
        - collection
  /collections/{collection}/{documentId}:
    get:
      description: Get item data
      operationId: getItemById
      parameters:
        - $ref: "#/components/parameters/CollectionNameParam"
        - $ref: "#/components/parameters/DocumentIdParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionItemDetails"
          description: successful operation
        "400":
          description: Invalid request
        "401":
          description: User is not a collection reader
        "404":
          description: Document not found
        "500":
          description: Internal server error
      summary: Get item
      tags:
        - collection
  /events:
    post:
      description: |
        Create an event for the given document in a given collection. The collection must not be locked.

        ### Required permissions

        To create an event, the user must have one of the following permission:

        * `C_COLLECTIONNAME_READER`
        * `C_COLLECTIONNAME_ALLREADER`
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEventBody"
        description: Event data
        required: true
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
                example: 201 Created
          description: successful operation
        "400":
          description: Invalid request
        "401":
          description: User is not a collection reader
        "404":
          description: Document not found
        "500":
          description: Internal server error
      summary: Create event for document in collection
      tags:
        - event
  /maintenance/{collection}/rebuild-grants:
    post:
      description: Iterate over all documents and refresh grants.
      operationId: rebuildGrants
      parameters:
        - $ref: "#/components/parameters/CollectionNameParam"
      responses:
        "201":
          description: "Success"
          content:
            text/plain:
              schema:
                type: string
                example: 201 OK
        "401":
          description: User is not a collection admin
        "404":
          description: Collection not found
        "500":
          description: Internal server error
      summary: Rebuild grants for a collection
      tags:
        - maintenance
  /recoverables/{collection}:
    get:
      description: |
        Get a list of recoverable items within the collection. Requires
        activation of the two-staged-deletion.

        ### Required permissions

        * `C_COLLECTIONNAME_READER` and `C_COLLECTIONNAME_REMOVER` to
        recover documents from the first stage.
        * `C_COLLECTIONNAME_ADMIN` to recover documents from the second stage.
      operationId: listRecoverablesInCollection
      parameters:
        - $ref: "#/components/parameters/CollectionNameParam"
        - $ref: "#/components/parameters/ExactTitle"
        - $ref: "#/components/parameters/ExtraFields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/PFilter"
        - $ref: "#/components/parameters/SortList"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionItemsList"
          description: successful operation
        "400":
          description: Invalid request
        "401":
          description: User is not a collection remover or admin
        "404":
          description: Collection not found
        "500":
          description: Internal server error
      summary: List recoverable items within the collection
      tags:
        - collection
        - maintenance
components:
  parameters:
    ExactTitle:
      in: query
      name: exactTitle
      schema:
        type: string
      description: |
        Search for documents with this exact title
        (upper and lower case are respected)
      example: Rectangle
    ExtraFields:
      in: query
      name: extraFields
      schema:
        type: string
        pattern: ^[a-zA-Z0-9_]+(,[a-zA-Z0-9_]+)*$
      description: |
        A comma separated list of document fields that should
        be contained in the response
      example: price,length
    Limit:
      name: limit
      description: Number of items in the response. Defaults to `50`.
      in: query
      required: false
      schema:
        type: integer
        default: 50
        maximum: 250
        minimum: 1
      example: 25
    Offset:
      name: offset
      description: Number of skipped items in the response. Defaults to `0`.
      in: query
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
      example: 0
    PFilter:
      in: query
      name: pfilter
      schema:
        type: string
        description: |-
          A pound sign (`&`) separated list of filter conditions.

          Each filter condition consists of a field name and a value. Supported operators are: equality, value in array, starts with, contains.

          Examples:
           - `f1='v12'` matches documents where field `f1` equals `"v12"`
           - `a='k'&f1=4` matches documents where field `a` equals `"k"` and field `f1` equals `4`
           - `a='k'&f3=['p1','p4','p9']` matches documents where field `a` equals `"k"` and field `f3` is one of the values `"p1"`, `"p4"`, or `"p9"`
           - `az=@'kl'` matches documents where field `az` starts with `"kl"`
           - `pt=~'imi'` matches documents where field `pt` contains the substring `"imi"`
      examples:
        simple:
          summary: A simple filter
          value: "f1='v12'"
        multiple:
          summary: Multiple fields
          value: "a='k'&f1=4"
        list:
          summary: A list of values
          value: "a='k'&f3=['p1','p4','p9']"
        contains:
          summary: Filter a column to contain the specified value
          value: "a=~'foo'"
        starts_with:
          summary: Filter a column to start with the specified value
          value: "a=@'foo'"
    SortList:
      in: query
      name: sort
      schema:
        type: string
        pattern: ^[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)*[\+\-fb](,[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)*[\+\-fb])*$
        description: |-
          A comma separated list of document fields that should be used to sort the collection.

          The sort order is determined by the last character in the field name:
           - `+` for ascending order, the field is a direct child of the document's field `f`
           - `-` for descending order, the field is a direct child of the document's field `f`
           - `f` for ascending order, the field is in dotted notation, e. g. `my_workflow.signature.date`
           - `b` for descending order, the field is in dotted notation, e. g. `my_workflow.signature.date`

          Example: `price+,length-,my_workflow.signature.dateb` will order documents by price (ascending), length (descending) and signature date (descending).
      example: price+,length-
    CollectionNameParam:
      description: Path name of the collection
      explode: false
      in: path
      name: collection
      required: true
      schema:
        $ref: "#/components/schemas/CollectionName"
      style: simple
    DocumentIdParam:
      description: Document id as path component
      explode: false
      in: path
      name: documentId
      required: true
      schema:
        $ref: "#/components/schemas/DocumentId"
      style: simple
  schemas:
    CategoryId:
      description: Arbitrary event category
      example: 10
      type: integer
      format: int32
    DocumentId:
      description: Document identifier
      example: 503a11c7-0a2a-48c3-bf0a-e5296c3f26db
      format: uuid
      type: string
    DocumentFields:
      description: Field data
      type: object
    EventFields:
      description: Field data
      type: object
    CollectionName:
      description: Path name of the collection
      example: shapes
      maxLength: 32
      minLength: 1
      pattern: "^[a-z][-a-z0-9]*$"
      type: string
    CollectionsList:
      example:
        total: 1
        offset: 0
        limit: 20
        items:
          - locked: true
            name: shapes
            oao: false
            title: Shapes
          - locked: false
            name: letters
            oao: true
            title: Letters
      properties:
        limit:
          default: 50
          maximum: 250
          minimum: 1
          type: integer
        offset:
          default: 0
          minimum: 0
          type: integer
        total:
          default: 0
          minimum: 0
          type: integer
        items:
          items:
            $ref: "#/components/schemas/Collection"
          type: array
      required:
        - items
        - limit
        - offset
        - total
      type: object
    Collection:
      example:
        locked: false
        name: shapes
        oao: true
        title: Shapes
      properties:
        name:
          description: Path name of the collection
          example: shapes
          maxLength: 32
          minLength: 1
          pattern: "^[a-z][-a-z0-9]*$"
          type: string
        title:
          description: Human readable name of the collection
          example: Shapes
          maxLength: 150
          minLength: 1
          type: string
        oao:
          description: |
            Owner access only. Indicates if documents within the collection
            are _owner access only_ (value `true`) or all documents in the
            collection can be read by all users (`false`).
          type: boolean
        locked:
          description: |
            Indicates if new documents within the collection can be created
            (value `false`) or the collection is set to read only (`true`).
          type: boolean
      required:
        - locked
        - name
        - oao
        - title
      type: object
    CollectionItemsList:
      example:
        total: 1
        offset: 0
        limit: 20
        items:
          - id: 9f818bff-a1b4-487a-9706-29a5ac1cf898
            f:
              title: Rectangle
          - id: e109a39d-fb8b-4d15-9794-9f3b2eca9132
            f:
              title: Circle
      properties:
        limit:
          default: 50
          maximum: 250
          minimum: 1
          type: integer
        offset:
          default: 0
          minimum: 0
          type: integer
        total:
          default: 0
          minimum: 0
          type: integer
        items:
          items:
            $ref: "#/components/schemas/CollectionItem"
          type: array
      required:
        - items
        - limit
        - offset
        - total
      type: object
    CollectionItem:
      example:
        id: 9f818bff-a1b4-487a-9706-29a5ac1cf898
        f:
          title: Rectangle
          price: 14
      properties:
        id:
          $ref: "#/components/schemas/DocumentId"
        f:
          $ref: "#/components/schemas/DocumentFields"
      required:
        - id
        - f
      type: object
    CollectionItemDetails:
      example:
        id: 9f818bff-a1b4-487a-9706-29a5ac1cf898
        f:
          title: Rectangle
          price: 14
        e:
          - id: 17
            category: 15
            ts: "2017-07-21T17:32:28Z"
            e:
              title: Approved
              mail: false
      properties:
        id:
          $ref: "#/components/schemas/DocumentId"
        f:
          $ref: "#/components/schemas/DocumentFields"
        e:
          type: array
          items:
            $ref: "#/components/schemas/CollectionItemEvent"
      required:
        - id
        - f
        - e
      type: object
    CollectionItemEvent:
      example:
        id: 17
        category: 1020
        e:
          title: Approved
          mail: false
        ts: "2017-07-21T17:32:28Z"
      properties:
        id:
          minimum: 0
          type: integer
        ts:
          example: "2017-07-21T17:32:28Z"
          format: date-time
          type: string
        category:
          $ref: "#/components/schemas/CategoryId"
        e:
          $ref: "#/components/schemas/EventFields"
      required:
        - id
        - category
        - e
        - ts
      type: object
    CreateEventBody:
      example:
        category: 1020
        collection: shapes
        document: 0a804901-a425-4f85-bb37-56827bf5f083
        e:
          title: Approved
          mail: false
      properties:
        category:
          $ref: "#/components/schemas/CategoryId"
        collection:
          $ref: "#/components/schemas/CollectionName"
        document:
          $ref: "#/components/schemas/DocumentId"
        e:
          $ref: "#/components/schemas/EventFields"
      required:
        - category
        - collection
        - document
        - e
      type: object
    SearchCollectionBody:
      properties:
        filter:
          $ref: "#/components/schemas/SearchFilter"
      type: object
    SearchFilterList:
      description: A list of search filters
      type: array
      items:
        $ref: "#/components/schemas/SearchFilter"
    SearchFilterFieldOpValue:
      required:
        - f
        - o
        - v
      properties:
        f:
          type: string
          description: Field name
          example: "price.currency"
        o:
          type: string
          description: Operator
          enum:
            - eq
            - ne
            - lt
            - le
            - gt
            - ge
            - startswith
            - containstext
            - in
        v:
          description: Value
          oneOf:
            - $ref: "#/components/schemas/ValueString"
            - $ref: "#/components/schemas/ValueBoolean"
            - $ref: "#/components/schemas/ValueNumber"
      type: object
    SearchFilterFieldOp:
      required:
        - f
        - o
      properties:
        f:
          type: string
          description: Field name
          example: "price.currency"
        o:
          type: string
          description: Operator
          enum:
            - "null"
            - "notnull"
      type: object
    SearchFilterOrGroup:
      required:
        - "or"
      properties:
        "or":
          $ref: "#/components/schemas/SearchFilterList"
    SearchFilterAndGroup:
      required:
        - "and"
      properties:
        "and":
          $ref: "#/components/schemas/SearchFilterList"
    SearchFilter:
      description: A search filter
      oneOf:
        - $ref: "#/components/schemas/SearchFilterFieldOpValue"
        - $ref: "#/components/schemas/SearchFilterFieldOp"
        - $ref: "#/components/schemas/SearchFilterAndGroup"
        - $ref: "#/components/schemas/SearchFilterOrGroup"
    ValueString:
      description: A string value
      example: Foo
      type: string
    ValueNumber:
      description: A number value
      example: 56.3
      type: number
    ValueBoolean:
      description: A boolean value
      type: boolean
tags:
  - name: administration
    description: Administrative tasks
  - name: collection
    description: Handling documents within the collection
  - name: event
    description: Events for documents
